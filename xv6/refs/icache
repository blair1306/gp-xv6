<def f='codebrowser/fs.c' l='159' ll='162' type='struct (anonymous struct at /home/jon/workspace/xv6-public/fs.c:159:1)'/>
<use f='codebrowser/fs.c' l='167' u='m' c='iinit'/>
<use f='codebrowser/fs.c' l='227' u='m' c='iget'/>
<use f='codebrowser/fs.c' l='231' u='m' c='iget'/>
<use f='codebrowser/fs.c' l='231' u='m' c='iget'/>
<use f='codebrowser/fs.c' l='234' u='m' c='iget'/>
<use f='codebrowser/fs.c' l='250' u='m' c='iget'/>
<use f='codebrowser/fs.c' l='260' u='m' c='idup'/>
<use f='codebrowser/fs.c' l='262' u='m' c='idup'/>
<use f='codebrowser/fs.c' l='277' u='m' c='ilock'/>
<use f='codebrowser/fs.c' l='279' u='m' c='ilock'/>
<use f='codebrowser/fs.c' l='281' u='m' c='ilock'/>
<use f='codebrowser/fs.c' l='306' u='m' c='iunlock'/>
<use f='codebrowser/fs.c' l='309' u='m' c='iunlock'/>
<use f='codebrowser/fs.c' l='320' u='m' c='iput'/>
<use f='codebrowser/fs.c' l='326' u='m' c='iput'/>
<use f='codebrowser/fs.c' l='330' u='m' c='iput'/>
<use f='codebrowser/fs.c' l='335' u='m' c='iput'/>
<doc f='codebrowser/fs.c' l='97'>// Inodes.
//
// An inode describes a single unnamed file.
// The inode disk structure holds metadata: the file&apos;s type,
// its size, the number of links referring to it, and the
// list of blocks holding the file&apos;s content.
//
// The inodes are laid out sequentially on disk immediately after
// the superblock. Each inode has a number, indicating its
// position on the disk.
//
// The kernel keeps a cache of in-use inodes in memory
// to provide a place for synchronizing access
// to inodes used by multiple processes. The cached
// inodes include book-keeping information that is
// not stored on disk: ip-&gt;ref and ip-&gt;flags.
//
// An inode and its in-memory represtative go through a
// sequence of states before they can be used by the
// rest of the file system code.
//
// * Allocation: an inode is allocated if its type (on disk)
//   is non-zero. ialloc() allocates, iput() frees if
//   the link count has fallen to zero.
//
// * Referencing in cache: an entry in the inode cache
//   is free if ip-&gt;ref is zero. Otherwise ip-&gt;ref tracks
//   the number of in-memory pointers to the entry (open
//   files and current directories). iget() to find or
//   create a cache entry and increment its ref, iput()
//   to decrement ref.
//
// * Valid: the information (type, size, &amp;c) in an inode
//   cache entry is only correct when the I_VALID bit
//   is set in ip-&gt;flags. ilock() reads the inode from
//   the disk and sets I_VALID, while iput() clears
//   I_VALID if ip-&gt;ref has fallen to zero.
//
// * Locked: file system code may only examine and modify
//   the information in an inode and its content if it
//   has first locked the inode. The I_BUSY flag indicates
//   that the inode is locked. ilock() sets I_BUSY,
//   while iunlock clears it.
//
// Thus a typical sequence is:
//   ip = iget(dev, inum)
//   ilock(ip)
//   ... examine and modify ip-&gt;xxx ...
//   iunlock(ip)
//   iput(ip)
//
// ilock() is separate from iget() so that system calls can
// get a long-term reference to an inode (as for an open file)
// and only lock it for short periods (e.g., in read()).
// The separation also helps avoid deadlock and races during
// pathname lookup. iget() increments ip-&gt;ref so that the inode
// stays cached and pointers to it remain valid.
//
// Many internal file system functions expect the caller to
// have locked the inodes involved; this lets callers create
// multi-step atomic operations.</doc>
